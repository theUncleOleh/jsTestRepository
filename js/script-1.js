// function makeMessage (name, price) {
//     // Пиши код ниже этой строки
//      const message = `Вы выбрали ${name}, цена за штуку ${price} кредитов.`;
   
//     // Пиши код выше этой строки
//     return message;
//   };
//   console.log(makeMessage('Радар', 6150));
//   console.log(makeMessage('Сканер', 3500));
//   console.log(makeMessage('Реактор', 8000));
//   console.log(makeMessage('Двигатель', 4070));

// function makeMessage (name, price) {
//   // Пиши код ниже этой строки
//    const message = `Вы выбрали ${name}, цена за штуку ${price} кредитов`;
//   // Пиши код выше этой строки
//   return message;
  
// };
// function makeMessage (name, price) {
//   // Пиши код ниже этой строки
//    const message = `Вы выбрали ${name}, цена за штуку ${price} кредитов`;
  
//   // Пиши код выше этой строки
//   return message;
// };
// makeMessage('Радар', 6150);


// function checkStorage(available, ordered) {
//   let message;
//   // Пиши код ниже этой строки
// if(available >= ordered) {
// message = 'Заказ оформлен, с вами свяжется менеджер.';
// } else {
// message = 'На складе недостаточно товаров!';
// }
//   // Пиши код выше этой строки
//   return message;
// }
// console.log(checkStorage(100, 50));
// console.log(checkStorage(100, 130));
// console.log(checkStorage(200, 20));
// console.log(checkStorage(200, 150));
// console.log(checkStorage(150, 180));

// function checkStorage(available, ordered) {
//   let message;
//   // Пиши код ниже этой строки
// if(available < ordered) {
//   message = 'На складе недостаточно товаров!';
// } else {
//   message = 'Заказ оформлен, с вами свяжется менеджер';
// }
//   // Пиши код выше этой строки
//   return message;
// }

// задача 18(1)

// function makeTransaction(pricePerDroid, orderedQuantity, customerCredits) {
//   let message;
//   // Пиши код ниже этой строки
// const totalPrice = pricePerDroid * orderedQuantity;
//   if(totalPrice > customerCredits) {
//  message  = 'Недостаточно средств на счету!'
//   } else {
//   const balance = customerCredits - totalPrice;
//   message = `ВЫ купили ${orderedQuantity} дроидов, на счету осталось ${balance} кредитов. `}
//   // Пиши код выше этой строки
//   return message;
// }
// console.log(makeTransaction(3000, 5, 23000));
// console.log(makeTransaction(1000, 3, 15000));
// console.log(makeTransaction(5000, 10, 8000));
// console.log(makeTransaction(2000, 8, 10000));
// console.log(makeTransaction(500, 10, 5000));

// задача 18(2)

// function makeTransaction(pricePerDroid, orderedQuantity, customerCredits) {
//   let message;
//   // Пиши код ниже этой строки
// const totalPrice = pricePerDroid * orderedQuantity;

//   if(totalPrice > customerCredits) {
//   message = 'Недостаточно средств на счету!'
//   } else {
//     let balance = customerCredits - totalPrice;
//    message = `Вы купили ${orderedQuantity} дроидов, на счету осталось ${balance} кредитов`}
//   // Пиши код выше этой строки
//   return message;
// }

// задача 19

// function checkPassword(password) {
//   const ADMIN_PASSWORD = 'jqueryismyjam';
//   let message;

//   if (password === null) { // Дополни эту строку
//     message =  'Отменено пользователем!';
//   } else if (password === ADMIN_PASSWORD) { // Дополни эту строку
//     message = 'Добро пожаловать!';
//   } else {
//     message = 'Доступ запрещен, неверный пароль!';
//   }

//   return message;
// }

// задача 21 


// function isNumberInRange(start, end, number) {
//     const isInRange = number >= start && number <= end; // дополни эту строку
  
//     return isInRange;
//   }

// задача 22 Логическое «ИЛИ» (оператор ||);
// Оператор || приводит все операнды к булю и возвращает значение одного из них. Левый операнд, если его можно привести к true, и правый в остальных случаях.;
  
// Задание, Функция checkIfCanAccessContent(subType) проверяет, может ли пользователь получить доступ к контенту. Проверка происходит по типу подписки. Получить доступ могут только пользователи с подпиской pro или vip.;

//   Присвой переменной canAccessContent выражение проверки подписки. Если значение параметра subType равно строкам 'pro' или 'vip', пользователь получит доступ. Результатом выражения проверки будет буль true или false.;

//   function checkIfCanAccessContent(subType) {
//     const canAccessContent = subType === 'pro' || subType === 'vip' ; // дополни эту строку
  
//     return canAccessContent;
//   }
//  задача 23;
//  Логическое «НЕ» (оператор !);

//  теория: Все операторы, которые мы рассматривали до этого, были бинарными. Т.е. они содержали два операнда: левый и правый. Логическое «НЕ» - это унарный оператор, выполняющий операцию над одним операндом справа.

//  задачи: Задание
//  Функция isNumberNotInRange(start, end, number) проверяет, не входит ли число в промежуток. То есть число должно быть меньше либо равно start и больше либо равно end. Результатом выражения проверки будет буль true или false.
 
//  Она объявляет три параметра, значения которых будут задаваться во время её вызова:
 
//  number - число, не вхождение которого проверяется
//  start - начало числового промежутка
//  end - конец числового промежутка
//  Присвой переменной isNotInRange выражение инверсии значения переменной isInRange используя оператор !.


//  function isNumberNotInRange(start, end, number) {
//     const isInRange = number >= start && number <= end;
//     const isNotInRange = !isInRange; // Дополни эту строку
  
//     return isNotInRange;
//   }

// задача 24
// Задача: расчёт скидки
// задачи:Функция getDiscount(totalSpent) определяет значение скидки в зависимости от общей суммы потраченных денег (параметр totalSpent) в магазине за всё время (партнёрская программа). Скидка записывается в переменную discount и возвращается из функции как результат её работы.

// Используя ветвления и логические операторы, дополни код функции.

// Если потрачено от 50000 ( включительно ) или больше кредитов - скидка 10% (золотой партнёр)
// Если потрачено от 20000 (включительно) до 50000 кредитов - скидка 5% (серебрянный партнёр)
// Если потрачено от 5000 (включительно) до 20000 кредитов - скидка 2% (бронзовый партнёр)
// Если потрачено меньше чем 5000 кредитов - скидка 0 (базовый партнёр)
// Значения скидок каждого уровня хранятся в одноимённых константах BASE_DISCOUNT, BRONZE_DISCOUNT, SILVER_DISCOUNT и GOLD_DISCOUNT.

// function getDiscount(totalSpent) {
//     const BASE_DISCOUNT = 0;
//     const BRONZE_DISCOUNT = 0.02;
//     const SILVER_DISCOUNT = 0.05;
//     const GOLD_DISCOUNT = 0.1;
//     let discount;
//     // Пиши код ниже этой строки
//   if(totalSpent >= 50000) {
//    discount = 0.1;
//   } else if(totalSpent >=20000 && totalSpent < 50000){
//    discount = 0.05; 
//   } else if(totalSpent >= 5000 && totalSpent < 20000){
//   discount = 0.02;
//   } else if(totalSpent < 5000){
//    discount = 0;
//   }else{
//   }
    
//     // Пиши код выше этой строки
//     return discount;
//   }
  

// задача 25 Тернарный оператор
// Тернарный оператор используется как более синтаксически краткая замена инструкции if...else, когда одной и той же переменной необходимо присвоить разные значения по условию.

// Работает по такой схеме:

// Вычисляется условие.
// Если условие истинно, то есть приводится к true, вычисляется выражение после ?.
// Если условие ложно, то есть приводится к false, вычисляется выражение после :.
// Значение вычисленного выражения возвращается как результат работы тернарного оператора.

// function checkStorage(available, ordered) {
//     let message;
//     // Пиши код ниже этой строки
  
//     message = ordered > available ? 'На складе недостаточно товаров!' : 'Заказ оформлен, с вами свяжется менеджер';
    
  
//     // Пиши код выше этой строки
//     return message;
//   }

// задача 26
// Задача: проверка пароля
// Функция checkPassword(password) сравнивает переданный ей пароль (параметр password) с сохранённым паролем администратора (константа ADMIN_PASSWORD) и возвращает строку с сообщением о результате.

// Используя тернарный оператор дополни функцию так, что:

// Если значения password и ADMIN_PASSWORD совпадают, присвой переменной message строку 'Доступ разрешен'.
// В противном случае, присвой message строку 'Доступ запрещен, неверный пароль!'.

// function checkPassword(password) {
//     const ADMIN_PASSWORD = 'jqueryismyjam';
//     let message;
//     // Пиши код ниже этой строки
//     message = password === ADMIN_PASSWORD? 'Доступ разрешен' : 'Доступ запрещен, неверный пароль!' ;
//     // Пиши код выше этой строки
//     return message;
//   }


// задача 27
// Инструкция switch
// В некоторых случаях неудобство чтения сложных ветвлений if...else можно избежать, используя более «плоский» синтаксис инструкции ветвления switch.

// Область применения switch ограничена задачами с одним общим вопросом (что сравнивать) и множеством вариантов ответов (с чем сравнивать).

// Его синтаксис состоит из блока switch(значение) - что нужно сравнить и множества отдельных случаев case значение - с чем нужно сравнить. Для сравнения используется оператор строгого равенства ===. То есть нельзя сравнить на больше или меньше, только на равенство.

// Значение в блоке switch(значение) - строка или число, которое сравнивается на строгое равенство со всеми значениями в блоках case значение по порядку, сверху вниз.

// Оператор break в завершении каждого блока case необходим, чтобы прервать дальнейшие проверки и сразу перейти к коду за switch в том случае, когда проверка на равенство вернула true.

// Задание
// Функция getSubscriptionPrice(type) получает строку с типом подписки пользователя (параметр type), проверяет её на совпадение с тремя возможными типами ежемесячной подписки и возвращает цену хранящуюся в переменной price.

// Если значение параметра type это строка:

// 'starter' - цена подписки 0 кредитов.
// 'professional' - цена подписки 20 кредитов.
// 'organization' - цена подписки 50 кредитов.
// Изначально в теле функции была инструкция if...else, которая выглядела вот так.

// function getSubscriptionPrice(type) {
//     let price;
//     // Пиши код ниже этой строки
  
//    switch (type) { // Дополни эту строку
//       case 'professional': // Дополни эту строку
//         price = 20 ; // Дополни эту строку
//         break;
  
//       case 'organization': // Дополни эту строку
//         price = 50 ; // Дополни эту строку
//         break;
  
//       case 'starter': // Дополни эту строку
//         price = 0 ; // Дополни эту строку
//         break;
//     }
  
//     // Пиши код выше этой строки
//     return price;
//   }

// задача 28
// Инструкция switch c блоком default
// Если ни одного совпадения значений не произошло, необходимо выполнить код по умолчанию, как в блоке else для инструкции if...else. Для этого после всех блоков case добавляется блок default.

// switch (значение) {
//   case значение:
//     инструкции;
//     break;

//   case значение:
//     инструкции;
//     break;

//   default:
//     инструкции;
// }
// Оператор break после блока default не нужен, так как это и так последнее что будет выполнено в switch и управление будет передано коду за ним.

// function checkPassword(password) {
//     const ADMIN_PASSWORD = 'jqueryismyjam';
//     let message;
  
//    switch(password){
//      case null:
//    message = 'Отменено пользователем!';
//        break;
//      case ADMIN_PASSWORD:
//    message = 'Добро пожаловать!';
//        break;
//      default:
//    message = 'Доступ запрещен, неверный пароль!';
//    } 
//     return message;
//   }

// задача 29
// Задача: доставка товара
// Функция getShippingCost(country) должна проверять возможность доставки товара в страну пользователя (параметр country) и возвращать сообщение о результате хранящееся в переменной message. Обязательно используй инструкцию switch.

// Формат возвращаемой строки Доставка в <страна> будет стоить <цена> кредитов, где вместо <страна> и <цена> необходимо подставить соотвествующие значения.

// Список стран и стоимость доставки:

// Китай - 100 кредитов
// Чили - 250 кредитов
// Австралия - 170 кредитов
// Ямайка - 120 кредитов
// Из списка видно, что доставка есть не везде. Если указанной страны нет в списке, то функция должна вернуть строку 'Извините, в вашу страну доставки нет'


// function getShippingCost(country) {
//     let message;
//     // Пиши код ниже этой строки
//   switch(country) {
//     case 'Китай':
//   message ='Доставка в Китай будет стоить 100 кредитов';
//   break;
//     case 'Чили':
//       message = 'Доставка в Чили будет стоить 250 кредитов';
//   break;
//     case 'Австралия':
//   message = 'Доставка в Австралия будет стоить 170 кредитов';
//   break;
//     case 'Ямайка':
//   message = 'Доставка в Ямайка будет стоить 120 кредитов';
//   break;
//     default:
//   message = 'Извините, в вашу страну доставки нет';
//   }
//     // Пиши код выше этой строки
//     return message;
//   }

// задача 30
// Длина строки
// Для того чтобы узнать длину строки, то есть количество её символов, у всех строк есть встроенное свойство length, значение которого можно получить обратившить к нему через точку после имени переменной или строкового литерала.

// function getNameLength(name) {
//     const message = `Длина вашего имени ${name.length} символа(ов)`; // Дополни эту строку
  
//     return message;
//   }
  
// задача 31
// Индексация элементов строки

// Строка — это индексированный набор из нуля или более символов, заключенных в одинарные, двойные или косые кавычки.

// Индексация элементов строки начинается с нуля. Например, в строке 'JavaScript' буква 'J' стоит на позиции с индексом 0, а 't' идёт под индексом 9. При этом длина строки 'JavaScript' равна 10, то есть индекс последнего элемента всегда на единицу меньше чем её длина.

// Для доступа к значению элемента строки используется синтаксис квадратных скобок строка[индекс].

// const courseTopic = 'JavaSript для начинающих';
// // Пиши код ниже этой строки

// const courseTopicLength = (courseTopic.length);
// const firstElement = (courseTopic[0]);
// const lastElement = (courseTopic[courseTopic.length-1]);

// задача 32
// Метод slice()
// Метод строк slice(startIndex, endIndex) используется для создания копии части или всей строки. Он делает копию элементов строки от startIndex и до, но не включая endIndex и возвращает новую строку.

// Функция getSubstring(string, length) принимает строку и возвращает подстроку от начала и до length символов. Она объявляет два параметра, значения которых будут задаваться во время её вызова:

// string - оригинальная строка
// length - количество символов с начала строки для подстроки
// Присвой переменной substring выражение создания подстроки длинной length символов (от начала) из строки string.




  // function getSubstring(string, length) {
  //   const substring = string.slice(0, length) ; // Дополни эту строку
  
  //   return substring;
  // }

//   задача 33
//   Форматирование сообщения

//   задание
//   Функция formatMessage(message, maxLength) принимает строку (параметр message) и форматирует её, если длина превышает значение в параметре maxLength.

// Дополни код функции так, что если длина строки:

// не превышает maxLength, функция возвращает её в исходном виде.
// больше maxLength, то функция обрезает строку до maxLength символов и добавляет в конец троеточие '...', после чего возвращает укороченную версию.

// function formatMessage(message, maxLength) {
//   let result;
// // Пиши код ниже этой строки
// if(message.length <= maxLength){
// result = message;
// } else {
// result = message.slice(0, maxLength) + '...' ;
// }

// // Пиши код выше этой строки
//   return result;
// }

// задача 34

// Методы toLowerCase() и toUpperCase()

// Бывают ситуации когда все символы в строке необходимо преобразовать в один регистр, верхний или нижний. Например, при поиске по ключевому слову, когда пользователь вводит строку 'saMsUng', а сравнить её надо со строкой 'samsung' или 'SAMSUNG'.

// console.log('saMsUng' === 'samsung'); // false
// console.log('saMsUng' === 'SAMSUNG'); // false
// Чтобы не требовать абсолютно точный ввод можно сделать «нормализацию» введённой пользователем строки, то есть преобразовать все её символы в верхний или нижний регистр. Методы строки toLowerCase() и toUpperCase() вернут новую строку в соответствующем регистре, не изменяя оригинальную.

// function normalizeInput(input) {
//   const normalizedInput =input.toLowerCase() ; // Дополни эту строку
//   return normalizedInput;
// }

// задача 35

// Метод includes()

// Метод строк includes(substring) проверяет входит ли подстрока substring в строку, возвращает буль - true если входит и false в противном случае. Регистр символов в строке и подстроке имеет значение, так как например буква 'a' не равна букве 'А'.


// function checkForName(fullName, name) {
//   const result = fullName.includes(name) ; // Дополни эту строку
//    return result;
//  }
 

// задача 36
// Проверка спама


// Задание
// Функция checkForSpam(message) принимает строку (параметр message), проверяет её на содержание запрещенных слов spam и sale, и возвращает результат проверки. Слова в строке параметра message могут быть в произвольном регистре, например SPAM или sAlE.

// Если нашли запрещенное слово (spam или sale) то функция возвращает буль true.
// Если в строке нет запрещенных слов, функция возвращает буль false.

// function checkForSpam(message) {
//   let result;
//   // Пиши код ниже этой строки
//  result = message.toLowerCase();
//  result = result.includes('spam') || result.includes('sale');
 

  
//   // Пиши код выше этой строки
//   return result;
// }
// console.log( checkForSpam('Latest technology news'));
// console.log( checkForSpam('Get best sale offers now!'));


// * Напиши скрипт который просит пользователя ввести число и степень,
// * возводит число в эту степень и выводит результат в консоль
// попросить ввести число
// ввести степень и записать в переменную
// вывести это число на экран


// let base = prompt('Мне нужно число!');
// base = Number(base);
// console.log(base);
//  let power = prompt('введите степень');
//  power = Number(power);
//  console.log(power);

//  const result = base ** power;
//  console.log(result); 


// Генерим псевдослучайные числа
// * - Math.random()
// * - Math.round()